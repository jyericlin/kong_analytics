from flask import Flask, send_from_directory
from flask_socketio import SocketIO
from flask_cors import CORS  # Import the CORS library
import interpreter
import time

replay = [{'message': '\n'},
{'message': '\n'},
{'message': 'To'},
{'message': ' estimate'},
{'message': ' pi'},
{'message': ' using'},
{'message': ' Python'},
{'message': ','},
{'message': ' we'},
{'message': ' can'},
{'message': ' use'},
{'message': ' a'},
{'message': ' Monte'},
{'message': ' Carlo'},
{'message': ' method'},
{'message': '.'},
{'message': ' We'},
{'message': ' will'},
{'message': ' generate'},
{'message': ' random'},
{'message': ' points'},
{'message': ' inside'},
{'message': ' and'},
{'message': ' outside'},
{'message': ' of'},
{'message': ' a'},
{'message': ' circle'},
{'message': ','},
{'message': ' and'},
{'message': ' then'},
{'message': ' count'},
{'message': ' how'},
{'message': ' many'},
{'message': ' points'},
{'message': ' are'},
{'message': ' inside'},
{'message': ' the'},
{'message': ' circle'},
{'message': '.'},
{'message': ' The'},
{'message': ' ratio'},
{'message': ' of'},
{'message': ' inside'},
{'message': ' to'},
{'message': ' outside'},
{'message': ' points'},
{'message': ' is'},
{'message': ' an'},
{'message': ' estimate'},
{'message': ' of'},
{'message': ' pi'},
{'message': '.'},
{'message': '\n'},
{'message': '\n'},
{'message': 'Here'},
{'message': "'"},
{'message': 's'},
{'message': ' some'},
{'message': ' sample'},
{'message': ' code'},
{'message': ':'},
{'message': '\n'},
{'language': 'python'},
{'code': 'import'},
{'code': ' numpy'},
{'code': ' as'},
{'code': ' np'},
{'code': '\n'},
{'code': '\n'},
{'code': 'def'},
{'code': ' estimate'},
{'code': '_'},
{'code': 'pi'},
{'code': '('},
{'code': 'n'},
{'code': '):'},
{'code': '\n'},
{'code': '   '},
{'code': ' """'},
{'code': 'Est'},
{'code': 'imate'},
{'code': ' pi'},
{'code': ' using'},
{'code': ' a'},
{'code': ' Monte'},
{'code': ' Carlo'},
{'code': ' method'},
{'code': '""'},
{'code': '"'},
{'code': '\n'},
{'code': '   '},
{'code': ' #'},
{'code': ' Gener'},
{'code': 'ate'},
{'code': ' n'},
{'code': ' random'},
{'code': ' points'},
{'code': ' inside'},
{'code': ' and'},
{'code': ' outside'},
{'code': ' the'},
{'code': ' circle'},
{'code': '\n'},
{'code': '   '},
{'code': ' x'},
{'code': ' ='},
{'code': ' np'},
{'code': '.'},
{'code': 'random'},
{'code': '.'},
{'code': 'uniform'},
{'code': '(-'},
{'code': '1'},
{'code': ','},
{'code': ' '},
{'code': '1'},
{'code': ','},
{'code': ' size'},
{'code': '='},
{'code': 'n'},
{'code': ')'},
{'code': '\n'},
{'code': '   '},
{'code': ' y'},
{'code': ' ='},
{'code': ' np'},
{'code': '.'},
{'code': 'random'},
{'code': '.'},
{'code': 'uniform'},
{'code': '(-'},
{'code': '1'},
{'code': ','},
{'code': ' '},
{'code': '1'},
{'code': ','},
{'code': ' size'},
{'code': '='},
{'code': 'n'},
{'code': ')'},
{'code': '\n'},
{'code': '   '},
{'code': ' #'},
{'code': ' Count'},
{'code': ' how'},
{'code': ' many'},
{'code': ' points'},
{'code': ' are'},
{'code': ' inside'},
{'code': ' the'},
{'code': ' circle'},
{'code': '\n'},
{'code': '   '},
{'code': ' inside'},
{'code': ' ='},
{'code': ' sum'},
{'code': '('},
{'code': 'x'},
{'code': '**'},
{'code': '2'},
{'code': ' +'},
{'code': ' y'},
{'code': '**'},
{'code': '2'},
{'code': ' <='},
{'code': ' '},
{'code': '1'},
{'code': ')'},
{'code': '\n'},
{'code': '   '},
{'code': ' return'},
{'code': ' '},
{'code': '4'},
{'code': ' *'},
{'code': ' inside'},
{'code': ' /'},
{'code': ' n'},
{'code': '\n'},
{'executing': {'code': 'import numpy as np\n\ndef estimate_pi(n):\n    """Estimate pi using a Monte Carlo method"""\n    # Generate n random points inside and outside the circle\n    x = np.random.uniform(-1, 1, size=n)\n    y = np.random.uniform(-1, 1, size=n)\n    # Count how many points are inside the circle\n    inside = sum(x**2 + y**2 <= 1)\n    return 4 * inside / n\n', 'language': 'python'}},
{'active_line': 1},
{'active_line': 3},
{'active_line': None},
{'output': ''},
{'end_of_execution': True},
{'message': ' it'},
{'message': ' is'},
{'message': ' likely'},
{'message': ' that'},
{'message': ' the'},
{'message': ' function'},
{'message': ' `'},
{'message': 'est'},
{'message': 'imate'},
{'message': '_'},
{'message': 'pi'},
{'message': '`'},
{'message': ' returned'},
{'message': ' a'},
{'message': ' value'},
{'message': '.'},
{'message': ' To'},
{'message': ' see'},
{'message': ' this'},
{'message': ' value'},
{'message': ','},
{'message': ' we'},
{'message': ' can'},
{'message': ' print'},
{'message': ' it'},
{'message': ' to'},
{'message': ' the'},
{'message': ' console'},
{'message': ' using'},
{'message': ' the'},
{'message': ' `'},
{'message': 'print'},
{'message': '()`'},
{'message': ' function'},
{'message': '.'},
{'message': ' Here'},
{'message': "'"},
{'message': 's'},
{'message': ' an'},
{'message': ' example'},
{'message': ' of'},
{'message': ' how'},
{'message': ' to'},
{'message': ' modify'},
{'message': ' the'},
{'message': ' previous'},
{'message': ' code'},
{'message': ' to'},
{'message': ' print'},
{'message': ' the'},
{'message': ' estimated'},
{'message': ' value'},
{'message': ' of'},
{'message': ' pi'},
{'message': ':'},
{'message': '\n'},
{'language': 'python'},
{'code': 'import'},
{'code': ' numpy'},
{'code': ' as'},
{'code': ' np'},
{'code': '\n'},
{'code': '\n'},
{'code': 'def'},
{'code': ' estimate'},
{'code': '_'},
{'code': 'pi'},
{'code': '('},
{'code': 'n'},
{'code': '):'},
{'code': '\n'},
{'code': '   '},
{'code': ' """'},
{'code': 'Est'},
{'code': 'imate'},
{'code': ' pi'},
{'code': ' using'},
{'code': ' a'},
{'code': ' Monte'},
{'code': ' Carlo'},
{'code': ' method'},
{'code': '""'},
{'code': '"'},
{'code': '\n'},
{'code': '   '},
{'code': ' #'},
{'code': ' Gener'},
{'code': 'ate'},
{'code': ' n'},
{'code': ' random'},
{'code': ' points'},
{'code': ' inside'},
{'code': ' and'},
{'code': ' outside'},
{'code': ' the'},
{'code': ' circle'},
{'code': '\n'},
{'code': '   '},
{'code': ' x'},
{'code': ' ='},
{'code': ' np'},
{'code': '.'},
{'code': 'random'},
{'code': '.'},
{'code': 'uniform'},
{'code': '(-'},
{'code': '1'},
{'code': ','},
{'code': ' '},
{'code': '1'},
{'code': ','},
{'code': ' size'},
{'code': '='},
{'code': 'n'},
{'code': ')'},
{'code': '\n'},
{'code': '   '},
{'code': ' y'},
{'code': ' ='},
{'code': ' np'},
{'code': '.'},
{'code': 'random'},
{'code': '.'},
{'code': 'uniform'},
{'code': '(-'},
{'code': '1'},
{'code': ','},
{'code': ' '},
{'code': '1'},
{'code': ','},
{'code': ' size'},
{'code': '='},
{'code': 'n'},
{'code': ')'},
{'code': '\n'},
{'code': '   '},
{'code': ' #'},
{'code': ' Count'},
{'code': ' how'},
{'code': ' many'},
{'code': ' points'},
{'code': ' are'},
{'code': ' inside'},
{'code': ' the'},
{'code': ' circle'},
{'code': '\n'},
{'code': '   '},
{'code': ' inside'},
{'code': ' ='},
{'code': ' sum'},
{'code': '('},
{'code': 'x'},
{'code': '**'},
{'code': '2'},
{'code': ' +'},
{'code': ' y'},
{'code': '**'},
{'code': '2'},
{'code': ' <='},
{'code': ' '},
{'code': '1'},
{'code': ')'},
{'code': '\n'},
{'code': '   '},
{'code': ' return'},
{'code': ' '},
{'code': '4'},
{'code': ' *'},
{'code': ' inside'},
{'code': ' /'},
{'code': ' n'},
{'code': '\n'},
{'code': '\n'},
{'code': '#'},
{'code': ' Call'},
{'code': ' the'},
{'code': ' function'},
{'code': ' with'},
{'code': ' a'},
{'code': ' value'},
{'code': ' of'},
{'code': ' n'},
{'code': '='},
{'code': '1'},
{'code': '0'},
{'code': '0'},
{'code': '0'},
{'code': '\n'},
{'code': 'result'},
{'code': ' ='},
{'code': ' estimate'},
{'code': '_'},
{'code': 'pi'},
{'code': '('},
{'code': '1'},
{'code': '0'},
{'code': '0'},
{'code': '0'},
{'code': ')'},
{'code': '\n'},
{'code': '\n'},
{'code': '#'},
{'code': ' Print'},
{'code': ' the'},
{'code': ' estimated'},
{'code': ' value'},
{'code': ' of'},
{'code': ' pi'},
{'code': '\n'},
{'code': 'print'},
{'code': '("'},
{'code': 'The'},
{'code': ' estimated'},
{'code': ' value'},
{'code': ' of'},
{'code': ' pi'},
{'code': ' is'},
{'code': ':'},
{'code': '",'},
{'code': ' result'},
{'code': ')'},
{'code': '\n'},
{'executing': {'code': 'import numpy as np\n\ndef estimate_pi(n):\n    """Estimate pi using a Monte Carlo method"""\n    # Generate n random points inside and outside the circle\n    x = np.random.uniform(-1, 1, size=n)\n    y = np.random.uniform(-1, 1, size=n)\n    # Count how many points are inside the circle\n    inside = sum(x**2 + y**2 <= 1)\n    return 4 * inside / n\n\n# Call the function with a value of n=1000\nresult = estimate_pi(1000)\n\n# Print the estimated value of pi\nprint("The estimated value of pi is:", result)\n', 'language': 'python'}},
{'active_line': 1},
{'active_line': 3},
{'active_line': 13},
{'active_line': 4},
{'active_line': 6},
{'active_line': 7},
{'active_line': 9},
{'active_line': 10},
{'active_line': 16},
{'output': 'The estimated value of pi is: 3.1\n'},
{'active_line': None},
{'end_of_execution': True},
{'message': '3'},
{'message': '.'},
{'message': '1'},
{'message': ' is'},
{'message': ' indeed'},
{'message': ' the'},
{'message': ' estimated'},
{'message': ' value'},
{'message': ' of'},
{'message': ' pi'},
{'message': '.'},]

replay2 = [
{'message': 'I'},
{'message': "'m"},
{'message': ' Open'},
{'message': 'AI'},
{'message': "'s"},
{'message': ' Open'},
{'message': ' Interpreter'},
{'message': ','},
{'message': ' at'},
{'message': ' your'},
{'message': ' service'},
{'message': '.'},
{'message': ' How'},
{'message': ' may'},
{'message': ' I'},
{'message': ' assist'},
{'message': ' you'},
{'message': ' today'},
{'message': '?'},
{"output": "test output 1"},
{"output": "test output 2"},
]

replay = [
{'message': 'Hello'},
{'message': '!'},
{'message': ' How'},
{'message': ' can'},
{'message': ' I'},
{'message': ' assist'},
{'message': ' you'},
{'message': ' today'},
{'message': '?'},
]

app = Flask(__name__, static_folder='static', static_url_path='')
socketio = SocketIO(app, cors_allowed_origins="*")  # Allow all origins
CORS(app)  # This will enable CORS for all routes

# interpreter.local = True
# interpreter.model = "huggingface/TheBloke/CodeLlama-7B-Instruct-GGUF"

@app.route('/')
def index():
    return send_from_directory('static', 'index.html')

@socketio.on('send_message')
def handle_message(message):
    print(message['message'])
    # if message["message"] == "1":
    #     reply = replay
    # else:
    # reply = replay2
    reply = interpreter.chat(message['message'], display=False, stream=True)
    for chunk in reply: 
        print(chunk)
        if "message" in chunk:
            message_type = "message"
            content = chunk["message"]
        elif "code" in chunk:
            message_type = "code"
            content = chunk["code"]
        elif "executing" in chunk:
            message_type = "executing"
            content = chunk["executing"]
        elif "output" in chunk:
            message_type = "output"
            content = chunk["output"]
        elif "language" in chunk:
            message_type = "language"
            content = chunk["language"]
        else:
            print("Unknown chunk type: " + str(chunk.keys()))
            continue
        socketio.emit('receive_message', {'type': message_type, 'content': content})
    socketio.emit('end_signal')

if __name__ == '__main__':
    socketio.run(app, debug=True, port=5001)
